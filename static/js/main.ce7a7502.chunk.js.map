{"version":3,"sources":["components/AddItemForm.tsx","components/EnableSpan.tsx","components/TodoList.tsx","store/todoListReducer.ts","store/task-reducerr.ts","AppWithReducer.tsx","store/store.ts","index.tsx"],"names":["AddItemForm","props","useState","value","setValue","error","setError","callBack","trim","callback","TextField","helperText","label","size","variant","onChange","e","target","onKeyPress","key","IconButton","color","onClick","AddBox","fontSize","className","EnableSpan","editTitle","setEditTitle","editOff","onChangeValue","style","width","onBlur","autoFocus","Edit","TodoList","tasks","map","t","ListItem","disableGutters","divider","isDone","id","display","justifyContent","padding","Checkbox","setChangeStatus","currentTarget","checked","changeTaskTitle","title","removeTask","Delete","Typography","align","changeTodoListTitle","removeList","addTask","List","ButtonGroup","fullWidth","disableElevation","Button","filter","changeFilter","initialState","initialTasksState","AppWithReducer","todos","useSelector","state","todolists","dispatch","useDispatch","taskID","todoListID","action","type","todoListId","taskId","todolistId","ChangeTaskTitleAc","ChangeTitle","ChangeStatusAc","ChangeStatus","todoListComponent","tl","tasksRender","Grid","item","Paper","elevation","AppBar","position","Toolbar","edge","aria-label","Menu","Container","fixed","container","AddTodoList","v1","console","log","spacing","rootReducers","combineReducers","task","newTodoList","newState","store","createStore","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ce7a7502.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport './AddItem.css'\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemForm={\r\n    callback:(title:string)=>void\r\n}\r\n\r\nconst AddItemForm = (props:AddItemForm) => {\r\n    const [value, setValue] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.target.value)\r\n        setError(false)\r\n    }\r\n    const callBack=()=>{\r\n        if (value.trim() !== '') {\r\n            value && props.callback(value)\r\n            setValue('')\r\n            setError(false)\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            callBack()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                error={error}\r\n                helperText={'Field is empty'}\r\n                label={'title'}\r\n                size={\"small\"}\r\n                variant={'outlined'}\r\n                value={value}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressAddTask}\r\n\r\n            />\r\n            <IconButton  size={'small'} color={'primary'} onClick={()=>callBack()}>\r\n                <AddBox fontSize={\"large\"}/>\r\n            </IconButton>\r\n            {error && <div className={'error-message'}>\r\n                {error}\r\n            </div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Edit} from \"@material-ui/icons\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\n\r\ntype PropsEnableType = {\r\n    value: string\r\n    // setValue:(value:string)=>void\r\n    onChangeValue: (e: string) => void\r\n}\r\nconst EnableSpan = (props: PropsEnableType) => {\r\n    const [editTitle, setEditTitle] = useState<boolean>(false)\r\n    const [value, setValue] = useState<string>('')\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.target.value)\r\n        props.onChangeValue(e.target.value)\r\n    }\r\n\r\n    const editOff = () => {\r\n        setEditTitle(false)\r\n        props.onChangeValue(value)\r\n    }\r\n    const editOn = () => {\r\n        setEditTitle(true)\r\n        if (props.value) {\r\n            setValue(props.value)\r\n        }\r\n    }\r\n    const onKeyPressEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            editOff()\r\n        }\r\n    }\r\n    return (\r\n        editTitle ?\r\n            <TextField\r\n                style={{width: '150px'}}\r\n                value={value}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressEnter}\r\n                onBlur={editOff} autoFocus={true}\r\n            /> :\r\n             <span>\r\n              {props.value}\r\n                 <IconButton onClick={editOn} size={'small'}>\r\n                    <Edit/>\r\n                </IconButton>\r\n            </span>\r\n\r\n    )\r\n};\r\n\r\nexport default EnableSpan;","import React, {ChangeEvent, useState} from 'react';\r\nimport {showType, TaskType} from \"../App\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport EnableSpan from \"./EnableSpan\";\r\nimport {ButtonGroup, IconButton} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport List from \"@material-ui/core/List\";\r\nimport {CheckBox, Delete} from \"@material-ui/icons\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\ntype PropTypes = {\r\n    title: string,\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todoListID: string) => void\r\n    changeFilter: (filter: showType, todoListID: string) => void\r\n    addTask: (text: string, todoListID: string) => void\r\n    setChangeStatus: (id: string, isDone: boolean, todoListID: string) => void\r\n    filter: string\r\n    removeList: (todoListID: string) => void\r\n    id: string\r\n    changeTodoListTitle: (title: string, todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, todoListId: string, title: string) => void\r\n}\r\n\r\nconst TodoList = (props: PropTypes) => {\r\n\r\n    const addTask = (value: string) => {\r\n        value&&props.addTask(value, props.id)\r\n    }\r\n    const setAll = () => {\r\n        props.changeFilter('all', props.id)\r\n    }\r\n    const setActive = () => {\r\n        props.changeFilter('active', props.id)\r\n    }\r\n    const setComplete = () => {\r\n        props.changeFilter('completed', props.id);\r\n    }\r\n    const changeListTitle = (e: string) => {\r\n        props.changeTodoListTitle(e, props.id)\r\n    }\r\n    let tasks =props.tasks&&props.tasks.map((t: TaskType) => {\r\n        let onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            props.setChangeStatus(t.id, e.currentTarget.checked, props.id)\r\n        }\r\n        let onChangeTaskTitle = (e: string) => {\r\n            props.changeTaskTitle(t.id, e, props.id)\r\n        }\r\n\r\n        return (\r\n            <ListItem\r\n                disableGutters\r\n                divider\r\n                className={t.isDone ? 'is-done' : ''} key={t.id}\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    padding: '0px',\r\n                }}\r\n            >\r\n                <Checkbox\r\n                    color={'primary'}\r\n                    onChange={onChangeStatusHandler}\r\n                    checked={t.isDone}\r\n                />\r\n                <EnableSpan onChangeValue={onChangeTaskTitle} value={t.title}/>\r\n                <IconButton onClick={() => props.removeTask(t.id, props.id)}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </ListItem>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className='todolist'>\r\n            <Typography\r\n                        variant={'h6'}\r\n                        align={'center'}\r\n            >\r\n                <EnableSpan value={props.title} onChangeValue={changeListTitle}/>\r\n                <IconButton onClick={() => props.removeList(props.id)}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </Typography>\r\n            <AddItemForm callback={addTask}/>\r\n            <List>\r\n                {tasks}\r\n            </List>\r\n            <div>\r\n                <ButtonGroup\r\n                    fullWidth\r\n                    variant={'contained'}\r\n                    size={'small'}\r\n                    disableElevation\r\n                >\r\n                    <Button\r\n                        size={'small'}\r\n                        color={props.filter === 'all' ? 'secondary' : 'primary'}\r\n                        onClick={setAll}>All</Button>\r\n                    <Button\r\n                        size={'small'}\r\n                        color={props.filter === 'active' ? 'secondary' : 'primary'}\r\n                        onClick={setActive}>Active</Button>\r\n                    <Button\r\n                        size={'small'}\r\n                        color={props.filter === 'completed' ? 'secondary' : 'primary'}\r\n                        onClick={setComplete}>Completed\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoList;","import {TodoListTypes} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {showType} from \"../AppWithReducer\";\r\n\r\n\r\ntype RemoveTodoListActionType={\r\n    type:\"REMOVE_TODOLIST\"\r\n    id:string\r\n}\r\n\r\nexport type AddTodoList={\r\n    type:\"ADD-TODOLIST\"\r\n    todolistId:string\r\n    title:string\r\n}\r\ntype StatusFilter={\r\n    type:\"CHANGE-STATUS\"\r\n    todolistId:string\r\n    filter:showType\r\n}\r\ntype ChangeTitle={\r\n    type:\"CHANGE-NAME-TITLE\"\r\n    todolistId:string\r\n    title:string\r\n}\r\n\r\ntype ActionType=RemoveTodoListActionType | AddTodoList |StatusFilter|ChangeTitle\r\nconst initialState:Array<TodoListTypes>=[]\r\nexport const todoListReducer=(state=initialState,action:ActionType): Array<TodoListTypes>=>{\r\n    switch (action.type) {\r\n        case \"REMOVE_TODOLIST\":\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case \"ADD-TODOLIST\":\r\n            const newTodoList: TodoListTypes = {\r\n                id: action.todolistId,\r\n                title:action.title,\r\n                filter: 'all'\r\n            }\r\n            return [...state, newTodoList]\r\n\r\n        case \"CHANGE-STATUS\":\r\n           return state.map(tl=>tl.id==action.todolistId?{...tl,filter:action.filter}:tl)\r\n\r\n        case \"CHANGE-NAME-TITLE\":\r\n            return state.map(tl=>tl.id==action.todolistId?{...tl, title:action.title}:tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const RemoveTodoAc=(id:string):RemoveTodoListActionType=>{\r\n    return {\r\n        type:\"REMOVE_TODOLIST\",\r\n        id\r\n    }\r\n}\r\nexport const AddTodoList=(title:string,todolistId:string):AddTodoList=>{\r\n    return {\r\n        type:\"ADD-TODOLIST\",\r\n        todolistId,\r\n        title\r\n    }\r\n}\r\nexport const ChangeStatus=(filter:showType,id:string):StatusFilter=>{\r\n    return {\r\n        type:\"CHANGE-STATUS\",\r\n        todolistId:id,\r\n        filter,\r\n    }\r\n}\r\nexport const ChangeTitle=(id:string,title:string):ChangeTitle=>{\r\n    return {\r\n        type:\"CHANGE-NAME-TITLE\",\r\n        todolistId:id,\r\n        title,\r\n    }\r\n}","import {TaskStateType, TaskType, TodoListTypes} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodoList} from \"./todoListReducer\";\r\n\r\n\r\ntype RemoveTaskActionType={\r\n    type:\"REMOVE_TASK\"\r\n    id:string,\r\n    todoListId:string\r\n}\r\n\r\ntype AddTaks={\r\n    type:\"ADD-TASK\"\r\n    title:string\r\n    todolistId:string\r\n}\r\ntype StatusFilter={\r\n    type:\"CHANGE-STATUS\"\r\n    id:string\r\n    isDone:boolean\r\n    todolistId:string\r\n}\r\ntype ChangeTitle={\r\n    type:\"CHANGE-NAME-TITLE\"\r\n    id:string\r\n    title:string,\r\n    todolistId:string\r\n}\r\ntype RemoveTodolistType={\r\n    type:'REMOVE_TODOLIST',\r\n    todolistId:string\r\n}\r\ntype ActionType=RemoveTaskActionType | AddTaks |StatusFilter|ChangeTitle|AddTodoList|RemoveTodolistType\r\nconst initialTasksState:TaskStateType={}\r\nexport const taskReducer=(state=initialTasksState,action:ActionType):TaskStateType=>{\r\n    switch (action.type) {\r\n        case \"REMOVE_TASK\":\r\n            return {...state, [action.todoListId]:state[action.todoListId].filter(task=>task.id!==action.id)}\r\n        case \"ADD-TASK\":\r\n            const newTodoList: TaskType = {\r\n                id: v1(),\r\n                title:action.title,\r\n                isDone: false\r\n            }\r\n            return {...state,[action.todolistId]:[newTodoList, ...state[action.todolistId]]}\r\n        case \"CHANGE-STATUS\":\r\n            return {...state,[action.todolistId]:state[action.todolistId]\r\n                    .map(tl=>tl.id==action.id?{...tl,isDone:action.isDone}:tl)}\r\n            // return state.map(tl=>tl.id==action.id?{...tl,filter:action.filter}:tl)\r\n        case \"CHANGE-NAME-TITLE\":\r\n            return {...state,[action.todolistId]:state[action.todolistId]\r\n                    .map(t=>t.id==action.id?{...t,title:action.title}:t)}\r\n        case \"ADD-TODOLIST\":\r\n            return {...state,[action.todolistId]:[]}\r\n        case \"REMOVE_TODOLIST\":\r\n            let{[action.todolistId]:[],...newState}={...state}\r\n            // let newState={...state}\r\n            // delete newState[action.todolistId]\r\n            return newState\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const RemoveTaskAc=(taskId:string, todolistId:string):RemoveTaskActionType=>{\r\n    return {\r\n        type:\"REMOVE_TASK\",\r\n        id:taskId,\r\n        todoListId:todolistId,\r\n    }\r\n}\r\nexport const AddTaksAc=(title:string,todolistId:string):AddTaks=>{\r\n    return {\r\n        type:\"ADD-TASK\",\r\n        title,\r\n        todolistId:todolistId\r\n    }\r\n}\r\nexport const ChangeStatusAc=(id:string,isDone:boolean, todolistId:string):StatusFilter=>{\r\n    return {\r\n        type:\"CHANGE-STATUS\",\r\n        id,\r\n        isDone,\r\n        todolistId,\r\n    }\r\n}\r\nexport const ChangeTaskTitleAc=(id:string,title:string,todolistId:string):ChangeTitle=>{\r\n    return {\r\n        type:\"CHANGE-NAME-TITLE\",\r\n        id,\r\n        title,\r\n        todolistId\r\n    }\r\n}\r\nexport const AddTodolistAC=(title:string,todolistId:string):AddTodoList=>{\r\n    return{\r\n        type:'ADD-TODOLIST',\r\n        todolistId,\r\n        title\r\n    }\r\n}\r\nexport const RemoveTodolistAC=(id:string):RemoveTodolistType=>{\r\n    return{\r\n        type:'REMOVE_TODOLIST',\r\n        todolistId:id\r\n    }\r\n}","import React, {useReducer, useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./components/TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport AddItemForm from \"./components/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    AddTodoList,\r\n    ChangeStatus,\r\n    ChangeTitle,\r\n    RemoveTodoAc,\r\n    todoListReducer\r\n} from \"./store/todoListReducer\";\r\nimport {\r\n    AddTaksAc,\r\n    AddTodolistAC,\r\n    ChangeStatusAc,\r\n    ChangeTaskTitleAc,\r\n    RemoveTaskAc,\r\n    taskReducer\r\n} from \"./store/task-reducerr\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store/store\";\r\n\r\nexport type TaskType = {\r\n    title: string,\r\n    isDone: boolean,\r\n    id: string,\r\n}\r\n\r\nexport type TodoListTypes = {\r\n    id: string\r\n    title: string\r\n    filter: showType\r\n}\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type showType = 'all' | 'active' | 'completed'\r\n\r\nfunction AppWithReducer() {\r\n    // const todoListID1 = v1();\r\n    // const todoListID2 = v1();\r\n    // let randomId=v1()\r\n\r\n    const todos = useSelector<AppRootStateType, Array<TodoListTypes>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType,TaskStateType>(state => state.tasks)\r\n    const dispatch=useDispatch();\r\n    const removeTask = (taskID: string, todoListID: string) => {\r\n        // setTasks({\r\n        //         ...tasks,\r\n        //         [todoListID]: tasks[todoListID].filter(task => task.id !== taskID)\r\n        //     }\r\n        // )\r\n        let action=RemoveTaskAc(taskID,todoListID);\r\n        dispatch(action)\r\n    }\r\n    const changeTaskTitle = (taskId: string, title: string, todoListID: string) => {\r\n        // setTasks({\r\n        //     ...tasks, [todoListID]: tasks[todoListID].map(r => r.id === taskId ? {...r, title} : r)\r\n        // })\r\n        dispatch(ChangeTaskTitleAc(taskId,title,todoListID))\r\n    }\r\n    const changeTodoListTitle = (title: string, todoListID: string) => {\r\n        // setTodos(todos.map(t => t.id === todoListID ? {...t, title} : t))\r\n        dispatch(ChangeTitle(todoListID,title))\r\n    }\r\n    const addTask = (value: string, todoListID: string) => {\r\n        // const newTask: TaskType = {\r\n        //     title: value,\r\n        //     isDone: false,\r\n        //     id: v1()\r\n        // }\r\n        // setTasks({...tasks, [todoListID]: [newTask, ...tasks[todoListID]]})\r\n        dispatch(AddTaksAc(value,todoListID))\r\n    }\r\n    const setChangeStatus = (id: string, isDone: boolean, todoListID: string) => {\r\n        // setTasks({\r\n        //     ...tasks, [todoListID]: tasks[todoListID]\r\n        //         .map(t => t.id === id ? {...t, isDone: isDone} : t)\r\n        // })\r\n        let action=ChangeStatusAc(id,isDone,todoListID)\r\n        dispatch(action)\r\n    }\r\n    const changeFilter = (filter: showType, todoListID: string) => {\r\n        // setTodos(todos.map(tl => tl.id === todoListID ? {...tl, filter} : tl))\r\n        let action=ChangeStatus(filter,todoListID);\r\n        dispatch(action)\r\n    }\r\n    const removeList = (todoListID: string) => {\r\n        // setTodos(todos.filter(tl => tl.id !== todoListID))\r\n        let action=RemoveTodoAc(todoListID)\r\n        dispatch(action)\r\n        // dispatchSetTasks(action)\r\n    }\r\n    const addTodoList = (title: string) => {\r\n        // const newTodoList: TodoListTypes = {\r\n        //     id: v1(),\r\n        //     title,\r\n        //     filter: 'all'\r\n        // }\r\n        // setTodos([...todos, newTodoList])\r\n        // setTasks({...tasks, [newTodoList.id]: []})\r\n\r\n        dispatch(AddTodoList(title,v1()))\r\n        console.log(todos)\r\n        // dispatch(AddTodolistAC(title,randomId))\r\n    }\r\n\r\n    const todoListComponent = todos.map(tl => {\r\n        let tasksRender = tasks[tl.id]\r\n        if (tl.filter === 'active') {\r\n            tasksRender = tasks[tl.id].filter((t) => !t.isDone)\r\n        }\r\n        if (tl.filter === 'completed') {\r\n            tasksRender = tasks[tl.id].filter((t) => t.isDone)\r\n        }\r\n        return (\r\n            <Grid item>\r\n                <Paper key={tl.id} elevation={8} style={{padding: '15px'}}>\r\n                    <TodoList key={tl.id}\r\n                              id={tl.id}\r\n                              title={tl.title}\r\n                              tasks={tasksRender}\r\n                              removeTask={removeTask}\r\n                              changeFilter={changeFilter}\r\n                              addTask={addTask}\r\n                              setChangeStatus={setChangeStatus}\r\n                              filter={tl.filter}\r\n                              removeList={removeList}\r\n                              changeTaskTitle={changeTaskTitle}\r\n                              changeTodoListTitle={changeTodoListTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n\r\n        )\r\n    })\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <AppBar position=\"sticky\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button color=\"inherit\" variant={\"outlined\"}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"29px 0px\"}}>\r\n                    <AddItemForm callback={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={4}>\r\n                    {todoListComponent}\r\n                </Grid>\r\n            </Container>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithReducer;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {taskReducer} from \"./task-reducerr\";\r\nimport {todoListReducer} from \"./todoListReducer\";\r\n\r\n\r\nconst rootReducers=combineReducers({\r\n    tasks:taskReducer,\r\n    todolists:todoListReducer\r\n    }\r\n)\r\n\r\nexport const store=createStore(rootReducers);\r\n\r\nexport type AppRootStateType=ReturnType<typeof rootReducers>\r\n\r\n//@ts-ignore\r\nwindow.store=store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport AppWithReducer from \"./AppWithReducer\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithReducer/>\r\n    </Provider>\r\n    ,\r\n    document.getElementById('root'));\r\n\r\n\r\n"],"sourceRoot":""}